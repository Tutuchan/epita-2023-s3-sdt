---
title: "Data Structuration"
author: "Pierre Formont"
format: 
  revealjs:
    highlight-style: espresso
    smaller: true
    code-block-background: true
    code-block-border-left: true
    code-line-numbers: true
    theme: night
---

## Agenda

1. Context and goals
2. Common data formats
3. Work with `csv` and `json`

## Why data structuration

- Any application produces and/or consumes data
- Other applications may depend on this data
- Easier and more **efficient** with a well-defined data structure

## Example system

![](resources/diagrams/example-system.png)

## Common data formats

::: {.incremental}
- Plain text (_e.g._ `json`, `yaml`)
- Fixed-length buffers
- Delimiter-based buffers (_e.g._ `csv`)
- Markup-based buffers (_e.g._ `xml`)
:::

## Plain text files

```{.plain filename="months.txt"}
January
February
March
April
May
June
July
August
September
October
November
December
```

. . .

Read using Python:

```{python}
#| echo: true
FILE_PATH = "resources/plain/months.txt" 

with open(FILE_PATH, "r") as f:
  lines = f.read().splitlines()

print(lines)
```

## Fixed-length buffers

```{.plain filename="fixed-length.txt"}
0001Pierre                    Paris                         EPITA                         
0002Ada                       London                        Home                          
0003Margaret                  Boston                        MIT                           
```

Each element of the buffer has a fixed length.

[0001]{style="color:#E14D2A;"}[Pierre....................]{style="color:#FD841F;"}[Paris.........................]{style="color:#3E6D9C;"}[EPITA.........................]{style="color:#001253;"}

We can split the buffer and extract each part with knowledge of the schema:

- [0-3: id]{style="color:#E14D2A;"}
- [4-30: name]{style="color:#FD841F;"}
- [31-60: city]{style="color:#3E6D9C;"}
- [61-90: school]{style="color:#001253;"}

## Parse fixed-length buffers

```{.python code-line-numbers="|10-11|3-8|"}
FILE_PATH = "resources/fixed-length/users.txt" 

def parse_user(line):
  id = int(line[0:4])
  name = line[4:30].rstrip()
  city = line[30:60].rstrip()
  school = line[60:90].rstrip()
  return (id, name, city, school)

with open(FILE_PATH, "r") as f:
  users = [parse_user(line) for line in f.readlines()]

print(users)
```
. . .
```{python}
FILE_PATH = "resources/fixed-length/users.txt" 

def parse_user(line: str) -> tuple[str, str, str, str]:
  id = int(line[0:4])
  name = line[4:30].rstrip()
  city = line[30:60].rstrip()
  school = line[60:90].rstrip()
  return (id, name, city, school)

with open(FILE_PATH, "r") as f:
  users = [parse_user(line) for line in f.readlines()]

print(users)
```

## Side-note: Python type hints

```{.python code-line-numbers="|1|8|1,8"}
def parse_user(line):
  id = int(line[0:4])
  name = line[4:30].rstrip()
  city = line[30:60].rstrip()
  school = line[60:90].rstrip()
  return (id, name, city, school)

def parse_user(line: str) -> tuple[str, str, str, str]:
  id = int(line[0:4])
  name = line[4:30].rstrip()
  city = line[30:60].rstrip()
  school = line[60:90].rstrip()
  return (id, name, city, school)
```

. . .

- define the types of input and output of functions
- easier for other developers to understand what is expected
- or yourself in two months


## Using Python classes

```{.python code-line-numbers="|1-6|13|8|"}
class User:
  def __init__(self, id: int, name: str, city: str, school: str) -> None:
    self.id = id
    self.name = name
    self.city = city
    self.school = school

def parse_user(line: str) -> User:
  id = int(line[0:4])
  name = line[4:30].rstrip()
  city = line[30:60].rstrip()
  school = line[60:90].rstrip()
  return User(id, name, city, school)

with open(FILE_PATH, "r") as f:
  users = [parse_user(line) for line in f.readlines()]

print(users)
```

. . .

```{python}
class User:
  def __init__(self, id: int, name: str, city: str, school: str) -> None:
    self.id = id
    self.name = name
    self.city = city
    self.school = school

def parse_user(line: str) -> User:
  id = int(line[0:4])
  name = line[4:30].rstrip()
  city = line[30:60].rstrip()
  school = line[60:90].rstrip()
  return User(id, name, city, school)

with open(FILE_PATH, "r") as f:
  users = [parse_user(line) for line in f.readlines()]

print(users)
```

## Making it more readable

```{.python code-line-numbers="|10-11|"}
FILE_PATH = "resources/fixed-length/users.txt"

class User:
  def __init__(self, id: int, name: str, city: str, school: str) -> None:
    self.id = id
    self.name = name
    self.city = city
    self.school = school

  def __repr__(self) -> str:
    return f"[{self.id}] {self.name} at {self.school} in {self.city}"

with open(FILE_PATH, "r") as f:
  users = [parse_user(line) for line in f.readlines()]

for user in users:
  print(user)
```

`__repr__`, like `__init__` is a Python *dunder* method[^1] (or *magic* or *special* method). It is called under the hood whenever an object is being printed.

[^1]: Read more [here](https://mathspp.com/blog/pydonts/dunder-methods)

. . .

```{python}
class User:
  def __init__(self, id: int, name: str, city: str, school: str) -> None:
    self.id = id
    self.name = name
    self.city = city
    self.school = school

  def __repr__(self) -> str:
    return f"[{self.id}] {self.name} at {self.school} in {self.city}"

with open(FILE_PATH, "r") as f:
  users = [parse_user(line) for line in f.readlines()]

for user in users:
  print(user)
```

## Another option: dataclasses

```{.python code-line-numbers="|1|3|4-8|10,15|"}
from dataclasses import dataclass

@dataclass
class DataUser:
  id: int
  name: str
  city: str
  school: str

def parse_data_user(line: str) -> DataUser:
  id = int(line[0:4])
  name = line[4:30].rstrip()
  city = line[30:60].rstrip()
  school = line[60:90].rstrip()
  return DataUser(id, name, city, school)

with open(FILE_PATH, "r") as f:
  data_users = [parse_data_user(line) for line in f.readlines()]

for user in data_users:
  print(user)
```

. . .

```{python}
from dataclasses import dataclass

@dataclass
class DataUser:
  id: int
  name: str
  city: str
  school: str

def parse_data_user(line: str) -> DataUser:
  id = int(line[0:4])
  name = line[4:30].rstrip()
  city = line[30:60].rstrip()
  school = line[60:90].rstrip()
  return DataUser(id, name, city, school)

with open(FILE_PATH, "r") as f:
  data_users = [parse_data_user(line) for line in f.readlines()]

for user in data_users:
  print(user)
```

## CSV format (1/2)

The CSV (Comma-Separated Values) format has been in use for a very long time (since the 1970's !)

It is ubiquitous in tech:

- many databases can import/export from/to CSV
- many Unix commands (`cut`, `awk`, etc.) can split on commas -> basic CSV handling
- many text editors and IDEs offer some support for CSV

**But also outside of tech**: spreadsheets (Excel, Libreoffice, etc.) are, functionally, CSV files[^1]

[^1]: disclaimer, `.xslx` files are not actually CSV files

## CSV format (2/2)

```{.plain}
id,name,city,school
0001,Pierre,Paris,EPITA
0002,Ada,London,Home
0003,Margaret,Boston,MIT
```

::: {.incremental}

- No real standard but a set of conventions.
- Each row is an individual record where values are separated by -- usually -- commas, hence the name.
- The first row is usually a header containing the name of the fields.
- Field values can be empty, _e.g._

:::

. . .

```{.plain}
id,name,city,age,school
0001,Pierre,Paris,37,EPITA
0002,Ada,London,,Home
0003,Margaret,Boston,,MIT
```

## CSV exercises (1/2)

Read csv files in Python:

```{.python}
import csv

with open(FILE_PATH, "r") as f:
    reader = csv.reader(f)
    # to skip the header
    next(reader)
    for row in reader:
      process_row(row)
```

. . .

**Exercise 1**

>  Read the `resources/csv/users.csv` file using the `csv` package and store it into a list of class instances

## CSV exercises (2/2)

**Exercise 2**

>  Read the `resources/csv/ratp.csv`[^1] file using the `csv` package and place the data in class instances with the following schema:

```{.python}
class Station:
  rank: int
  network: str
  name: str
  number_of_users: int
  connections: list[str]
  city: str
  district: int | None
```

[^1]: RATP data coming from their [open datasets](https://data.ratp.fr/explore/dataset/trafic-annuel-entrant-par-station-du-reseau-ferre-2021/information/).

## JSON format (1/3)

::: {.incremental}

- JSON = **`J`**`ava`**`S`**`cript `**`O`**`bject `**`N`**`otation`
- more recent but also very common data format
- originated with Javascript but can be used in virtually every language
- one of the -- if not **the** -- most used format to exchange data between services
- used extensively in REST APIs (more on this topic later)
- unlike CSV, supports data types

:::

## JSON format (2/3)

A JSON document is a collection of key-value pairs, _e.g._

```{.json}
{
  "id": "0001",
  "name": "Pierre",
  "city": "Paris",
  "school": "EPITA",
  "age": 37,
  "is_teacher": true
}
```

. . .

Keys need to be in double-quotes and values can take one of several data types:

::: {.incremental}

- string: _e.g_ `"name": "Pierre"`
- number: _e.g._ `"age": 37`
- boolean: _e.g._ `"is_teacher": true`
- object: a collection of `key-value` pairs inside curly brackets -- `{ }`. The example above is itself an object -> JSON allows nested objects
- array: an ordered list of zero or more elements, each of which may be of any type, inside square brackets -- `[ ]`

:::

## JSON format (3/3)

Can be written on one-line as well

```{.json}
{"id": "0001", "name": "Pierre", "city": "Paris", "school": "EPITA", "age": 37, "is_teacher": true}
```

. . .

By standard, a JSON document must contain only one object at the top-level, or an array of objects, _e.g._ this document is valid:

. . .

```{.json}
{
  "id": "0001",
  "name": "Pierre",
  "city": "Paris",
  "school": "EPITA",
  "age": 37,
  "is_teacher": true
}
```

. . .

This one also:

```{.json}
[
  {"id": "0001", "name": "Pierre", "city": "Paris", "school": "EPITA", "age": 37, "is_teacher": true},
  {"id": "0002", "name": "Ada", "city": "London", "school": "Home", "age": 28, "is_teacher": false}
]
```

## Line-delimited JSON

Strictly speaking, this one is invalid:

```{.json}
{"id": "0001", "name": "Pierre", "city": "Paris", "school": "EPITA", "age": 37, "is_teacher": true}
{"id": "0002", "name": "Ada", "city": "London", "school": "Home", "age": 28, "is_teacher": false}
```

. . . 

**However**, there are use case for this type of JSON documents: **log files**. 
 
Many libraries can then actually read these documents -- called _line-delimited JSON_ or _JSONL_.

## JSON exercises (1/2)

Read json files in Python:

```{.python}
import json

JSON_FILE_PATH = "resources/json/users.json"

with open(JSON_FILE_PATH, "r") as f:
    data = json.load(f)
    for row in data:
      process_row(row)
```

**Exercise 3**

>  Read the `users.json` file and store it into a list of class instances.

## JSON exercises (2/2)

**Exercise 4**

>  In the `french-cities.json` file, compute for each region (`admin_name`):
> 
> - the total population,
> - the average population,
> - the biggest city

```{json}
{
    "city": "Paris",
    "lat": "48.8566",
    "lng": "2.3522",
    "country": "France",
    "iso2": "FR",
    "admin_name": "Île-de-France",
    "capital": "primary",
    "population": "11020000"
}
```
